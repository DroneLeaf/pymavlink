# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Build and Optionally Publish

env:
  MAVLINK_TAG: master

on:
  # Any code push (branches or tags) so CI still runs for every commit
  push:
    branches: ['**']
    tags:     ['v*']         # e.g. v0.3.1
  pull_request:
  workflow_dispatch:

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      # This allows us to save the more expensive full build for the main branch
      # and releases, while using a lighter build for PRs
      - name: Set build matrix
        id: set-matrix
        shell: python
        run: |
          import json, os
          ref   = os.environ.get("GITHUB_REF", "")
          is_tag = ref.startswith("refs/tags/")

          if is_tag:  # üü¢ full matrix on tag pushes
              machines = [
                  ("linux", "ubuntu-latest", "auto"),
                  ("linux-arm", "ubuntu-24.04-arm", "auto"),
                  ("macos", "macos-latest", "arm64 x86_64 universal2"),
                  ("windows", "windows-latest", "auto"),
                  # ("windows-arm", "windows-11-arm", "auto"), # Can't do this one yet, as lxml doesn't have Windows ARM wheels, and the runner doesn't have libxml2 pre-installed
              ]
              py_versions = [
                "3.8",
                "3.9",
                "3.10",
                "3.11",
                "3.12",
                "3.13"
              ]
          else:        # üîµ cheap matrix for branch pushes / PRs / manual runs
              machines = [
                  ("linux", "ubuntu-latest", "native"),
                  ("windows", "windows-latest", "native"),
              ]
              py_versions = [
                "3.8",
                "3.13"
              ] # Chosing the two most likely to break in PRs

          matrix = {"include": []}
          for (name, runner, cibw_archs) in machines:
              for py in py_versions:
                  matrix["include"].append({
                      "name": f"python{py}-{name}",
                      "os": runner,
                      "python_version": py,
                      "cibw_build": f"cp{py.replace('.', '')}-*",
                      "cibw_archs": cibw_archs,
                  })

          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"matrix={json.dumps(matrix)}\n")

  build-wheels:
    needs: prepare
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    env:
      PYTHON_VERSION: ${{ matrix.python_version }}
    steps:
    - uses: actions/checkout@v2
    - name: Install mavlink definitions
      shell: bash
      run: |
        git clone --branch "$MAVLINK_TAG" --depth 1 https://github.com/DroneLeaf/leaf-mavlink.git mavlink
        ln -s $PWD/mavlink/message_definitions
    - name: Set CIBW_BUILD
      shell: bash
      run: echo "CIBW_BUILD=cp${PYTHON_VERSION/./}-*" >> $GITHUB_ENV
    - name: Build wheels
      uses: pypa/cibuildwheel@v2.23.3
      env:
        PYMAVLINK_FAST_INDEX: "1"
        CIBW_BUILD: ${{ matrix.cibw_build }}
        CIBW_ARCHS: ${{ matrix.cibw_archs }}
        CIBW_BEFORE_BUILD_LINUX: >
          if [ "$(uname -m)" = "i686" ] && grep -q musl /lib/libc.musl-*; then
            apk add --no-cache libxml2-dev libxslt-dev;
          fi
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: wheelhouse/*.whl
        if-no-files-found: error

  build-sdist:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.9"
    - name: Install mavlink messages
      run: |
        git clone --branch "$MAVLINK_TAG" --depth 1 https://github.com/DroneLeaf/leaf-mavlink.git mavlink
        ln -s $PWD/mavlink/message_definitions
    - name: Install dependencies
      run: |
        python3 -m pip install -U pip
        python3 -m pip install -U wheel
        python3 -m pip install build
        python3 -m pip install -U .
    - name: Build sdist
      run: pipx run build --sdist
    - name: Upload sdist
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz
        if-no-files-found: error

  publish:
    needs: [build-wheels, build-sdist]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write           # (needed to create the release)
      id-token: write           # (optional) for OIDC login to PyPI instead of passwords

    steps:
      # 1Ô∏è‚É£  Grab the artefacts we just built
      - name: Download dist artefacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - run: ls -lh dist/

      # 2Ô∏è‚É£  (Optional) Creates the release if it doesn't exist, or re-uses it if someone made it manually.
      - name: Create or update GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name:     ${{ github.ref_name }}
          body:     "Auto-generated wheels and sdist."
          draft:    false
          prerelease: false

      - name: Upload wheels & sdist to the Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: dist/**/*

      # 3Ô∏è‚É£  Upload to **Test PyPI**
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          repository-url: https://test.pypi.org/legacy/
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}   # create in repo/org secrets
          skip-existing: true

      # # 4Ô∏è‚É£  Smoke-test: install the exact tag from TestPyPI on a clean venv
      # - name: Verify install from TestPyPI
      #   shell: bash
      #   run: |
      #     python -m venv /tmp/venv
      #     source /tmp/venv/bin/activate
      #     python -m pip install --upgrade pip
      #     # Disable the main index so we‚Äôre 100 % sure we are using TestPyPI
      #     python -m pip install \
      #       --index-url https://test.pypi.org/simple/ \
      #       --no-deps \
      #       "pymavlink==${{ github.ref_name#v }}"
      #     python - <<'PY'
      #     import sys, pymavlink
      #     print("Imported pymavlink", pymavlink.__version__)
      #     PY

      # 4Ô∏è‚É£  If the previous step didn‚Äôt raise, push to **production PyPI**
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          repository-url: https://upload.pypi.org/legacy/
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}        # create in repo/org secrets
          skip-existing: true